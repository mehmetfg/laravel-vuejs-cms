import axios from "axios";const state={    currents:[],    current:{},};const getters={    currents(state){        return state.currents    },    current(state){        return state.current    },};const mutations={    initCurrents(state, current){        state.currents=current;    },    initCurrent(state, current){        state.current=current;    },    addCurrent(state, current){        state.currents.push(current);    },    updateCurrent(state, current){        let index=state.currents.findIndex(c=> c.id==current.id);        if(index>-1){            state.currents[index]=current;        }    },    deleteCurrent(state, currentID){        let index=state.currents.findIndex(c=> c.id==currentID)        if(index>-1){            state.currents.splice(index, 1)        }    }};const  actions={    initClientCurrents(context, payload){        axios.get('/backend/currents/'+payload).then(response=> {            context.commit('initCurrents', response.data.model)        })    },    initCurrents(context){        axios.get('/backend/currents').then(response=> {            context.commit('initCurrents', response.data.model)        })    },    initCurrent(context, currentId){        axios.get('/backend/current/'+currentId).then(response=> {            context.commit('initCurrent', response.data.model)        })    },    initCurrentWithBeetweenDate(context, payload){      axios.get('/backend/current/getDate?start='+payload.start+'&finish='+payload.finish, payload).then(response=>{          context.commit("initCurrents", response.data.model)      })    },    addCurrent(context, current){        axios.post("/backend/current", current).then(response=> {            if(response.data.type=="success") {                context.commit('addCurrent', {id: response.data.id, ...current});            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    updateCurrent(context, current){        axios.put('/backend/current/'+current.id, current).then(response=> {            if(response.data.type=="success") {                context.commit('updateCurrent', current);            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    isActiveSetter(context, current){        axios.put("/backend/current/isActiveSetter/"+current.id, current).then(response=> {            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    deleteCurrent(context, currentID){        swal({            title: "SİLME İŞLEMİ",            text: "<b>Silmek İstediğinizden Eminmisiniz!?</b>",            type: 'warning',            showCancelButton: true,            confirmButtonColor: '#3085d6',            cancelButtonColor: '#d33',            confirmButtonText: "Kabul Ediyorum",        }).then((result) => {            if (result.value) {                axios.delete('/backend/current/'+ currentID).then(response=> {                    if(response.data.type=="success") {                        context.commit('deleteCurrent', currentID)                    }                    swal({                        position: 'center',                        type: response.data.type,                        title: response.data.title,                        text: response.data.message,                        showConfirmButton: false,                        timer: 1500                    });                 })            }        })    }};export default {    state,    mutations,    actions,    getters}