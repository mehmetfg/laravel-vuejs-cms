import axios from "axios";const state={    formOpinions:[],    opinions:[],    opinion:{},};const getters={    opinions(state){        return state.opinions    },    formOpinions(state){        return state.formOpinions    },    opinion(state){        return state.opinion    },};const mutations={    initOpinions(state, opinion){        state.opinions=opinion;    },    initFormOpinions(state, opinion){        state.formOpinions=opinion;    },    initOpinion(state, opinion){        state.opinion=opinion;    },    addOpinion(state, opinion){        state.opinions.push(opinion);    },    updateOpinion(state, opinion){        let index=state.opinions.findIndex(c=> c.id==opinion.id);        if(index>-1){            state.opinions[index]=opinion;        }    },    deleteOpinion(state, opinionID){        let index1=state.formOpinions.findIndex(c=> c.id==opinionID)        if(index1>-1){            state.formOpinions.splice(index1, 1)        }        let index=state.opinions.findIndex(c=> c.id==opinionID)        if(index>-1){            state.opinions.splice(index, 1)        }    }};const  actions={    initOpinions(context){        axios.get('/backend/opinions').then(response=> {            context.commit('initOpinions', response.data.model)        })    },    initClientOpinions(context, payload){        axios.get('/backend/opinions/'+payload).then(response=> {            context.commit('initOpinions', response.data.model)        })    },    initFormOpinions(context, payload){        axios.get('/backend/opinion-form/'+payload).then(response=> {            context.commit('initFormOpinions', response.data.model)        })    },    initOpinion(context, opinionId){        axios.get('/backend/opinion/'+opinionId).then(response=> {            context.commit('initOpinion', response.data.model)        })    },    addOpinion(context, opinion){        axios.post("/backend/opinion", opinion).then(response=> {            if(response.data.type=="success") {                context.commit('addOpinion', {id: response.data.id, ...opinion});            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    updateOpinion(context, opinion){        axios.put('/backend/opinion/'+opinion.id, opinion).then(response=> {            if(response.data.type=="success") {                context.commit('updateOpinion', opinion);            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    isActiveSetter(context, opinion){        axios.put("/backend/opinion/isActiveSetter/"+opinion.id, opinion).then(response=> {            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    deleteOpinion(context, opinionID){        swal({            title: "SİLME İŞLEMİ",            text: "<b>Silmek İstediğinizden Eminmisiniz!?</b>",            type: 'warning',            showCancelButton: true,            confirmButtonColor: '#3085d6',            cancelButtonColor: '#d33',            confirmButtonText: "Kabul Ediyorum",        }).then((result) => {            if (result.value) {                axios.delete('/backend/opinion/'+ opinionID).then(response=> {                    if(response.data.type=="success") {                        context.commit('deleteOpinion', opinionID)                    }                    swal({                        position: 'center',                        type: response.data.type,                        title: response.data.title,                        text: response.data.message,                        showConfirmButton: false,                        timer: 1500                    });                 })            }        })    }};export default {    state,    mutations,    actions,    getters}