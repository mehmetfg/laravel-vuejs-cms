import axios from "axios";const state={    appointments:[],    appointment:{},    calendarData:{},};const getters={    appointments(state){        return state.appointments    },    appointment(state){        return state.appointment    },    calendarData(state){        return state.calendarData    }};const mutations={    initAppointments(state, appointment){        state.appointments=appointment;    },    initCalendarData(state, appointment){      state.calendarData=appointment    },    initAppointment(state, appointment){        state.appointment=appointment;    },    addAppointment(state, appointment){        state.appointments.push(appointment);    },    updateAppointment(state, appointment){        let index=state.appointments.findIndex(c=> c.id==appointment.id);        if(index>-1){            state.appointments[index]=appointment;        }    },    deleteAppointment(state, appointmentID){        let index=state.appointments.findIndex(c=> c.id==appointmentID)        if(index>-1){            state.appointments.splice(index, 1)        }    }};const  actions={    initAppointmentWithDate(context, payload){      axios.get('/backend/appoint/getDate?start='+payload.start+'&finish='+payload.finish).then(response=>{          context.commit("initAppointments", response.data.model)      })    },    initAppointmentWithName(context, payload){        axios.get('/backend/appoint/getWithName?name='+payload.name).then(response=>{            context.commit("initAppointments", response.data.model)        })    },    initCalendarData(context){        axios.get('/backend/calendar').then(response=> {            context.commit('initCalendarData', response.data.model)        })    },    initClientAppointments(context, payload){        axios.get('/backend/appointments/'+payload).then(response=> {            context.commit('initAppointments', response.data.model)        })    },    initAppointments(context){        axios.get('/backend/appointments').then(response=> {            context.commit('initAppointments', response.data.model)        })    },    initAppointment(context, appointmentId){        axios.get('/backend/appointment/'+appointmentId).then(response=> {            context.commit('initAppointment', response.data.model)        })    },    addAppointment(context, appointment){        axios.post("/backend/appointment", appointment).then(response=> {            if(response.data.type=="success") {                context.commit('addAppointment', {id: response.data.id, ...appointment});            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    addAppointmentWithClient(context, appointment){        axios.post("/backend/appointment/client", appointment).then(response=> {            if(response.data.type=="success") {                context.commit('addAppointment', {id: response.data.id, ...appointment});            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });        })    },    updateAppointment(context, appointment){        axios.put('/backend/appointment/'+appointment.id, appointment).then(response=> {            if(response.data.type=="success") {                context.commit('updateAppointment', appointment);            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    isActiveSetter(context, appointment){        axios.put("/backend/appointment/isActiveSetter/"+appointment.id, appointment).then(response=> {            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    deleteAppointment(context, appointmentID){        swal({            title: "SİLME İŞLEMİ",            text: "<b>Silmek İstediğinizden Eminmisiniz!?</b>",            type: 'warning',            showCancelButton: true,            confirmButtonColor: '#3085d6',            cancelButtonColor: '#d33',            confirmButtonText: "Kabul Ediyorum",        }).then((result) => {            if (result.value) {                axios.delete('/backend/appointment/'+ appointmentID).then(response=> {                    if(response.data.type=="success") {                        context.commit('deleteAppointment', appointmentID)                    }                    swal({                        position: 'center',                        type: response.data.type,                        title: response.data.title,                        text: response.data.message,                        showConfirmButton: false,                        timer: 1500                    });                 })            }        })    }};export default {    state,    mutations,    actions,    getters}